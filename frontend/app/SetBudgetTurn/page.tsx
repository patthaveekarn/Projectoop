"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useDispatch, useSelector } from "react-redux";
import { setConfig } from "../stores/slices/configSlice";
import { RootState } from "../stores/store";
import "../styles/SetBudgetTurn.css";

const SetBudgetTurn: React.FC = () => {
  const router = useRouter();
  const dispatch = useDispatch();
  const selectedMinions = useSelector((state: RootState) => state.minion.selectedMinions);
  const config = useSelector((state: RootState) => state.config);

  // ‚úÖ ‡πÉ‡∏ä‡πâ State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Budget ‡πÅ‡∏•‡∏∞ Turn (‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Redux ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  const [budget, setBudget] = useState(config.budget || "");
  const [turn, setTurn] = useState(config.turn || "");

  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Minion ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ ChooseMinion
  useEffect(() => {
    if (selectedMinions.length < 3) {
      router.push("/ChooseMinion");
    }
  }, [selectedMinions, router]);

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Budget ‡πÅ‡∏•‡∏∞ Turn ‡∏Å‡∏£‡∏≠‡∏Å‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const isValid = () => {
    return Number(budget) >= 1 && Number(turn) >= 1;
  };

  const handleNext = () => {
    if (isValid()) {
      dispatch(setConfig({ budget: Number(budget), turn: Number(turn) }));
      console.log("‚úÖ Dispatch setConfig:", { budget: Number(budget), turn: Number(turn) });
      console.log("üìå Updated Redux Config:", config); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Redux State ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤

      setTimeout(() => {
        router.push("/Gameplay");
      }, 500); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Delay ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Redux ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    } else {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ Budget ‡πÅ‡∏•‡∏∞ Turn ‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0");
    }
  };

  return (
      <div className="set-budget-turn-container">
        <h1 className="set-budget-turn-title">Set Budget and Turn</h1>

        <div className="budget-turn-inputs">
          <label>
            Budget:
            <input
                type="number"
                value={budget}
                onChange={(e) => setBudget(e.target.value)}
                placeholder="Enter Budget (1+)"
                min="1"
            />
            {Number(budget) < 1 && <span className="error-message">Budget ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0</span>}
          </label>

          <label>
            Turn:
            <input
                type="number"
                value={turn}
                onChange={(e) => setTurn(e.target.value)}
                placeholder="Enter Turn (1+)"
                min="1"
            />
            {Number(turn) < 1 && <span className="error-message">Turn ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0</span>}
          </label>
        </div>

        <div className="button-container">
          <button className="back-button" onClick={() => router.push("/CustomizeMinion")}>
            Back
          </button>
          <button className="next-button" onClick={handleNext} disabled={!isValid()}>
            Next
          </button>
        </div>
      </div>
  );
};

export default SetBudgetTurn;